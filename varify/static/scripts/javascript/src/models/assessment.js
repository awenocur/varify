// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'backbone', '../utils'], function(_, Backbone, utils) {
  var Assessment, AssessmentMetrics;
  Assessment = (function(_super) {
    __extends(Assessment, _super);

    function Assessment() {
      return Assessment.__super__.constructor.apply(this, arguments);
    }

    Assessment.prototype.urlRoot = function() {
      return utils.toAbsolutePath('api/assessments/');
    };

    Assessment.prototype.defaults = {
      'evidence_details': '',
      'sanger_requested': 'undefined',
      'assessment_category': 1,
      'father_result': 'undefined',
      'mother_result': 'undefined',
      'pathogenicity': 1,
      'created': 'undefined',
      'modified': 'undefined',
      'sample_result': 'undefined'
    };

    Assessment.prototype.parse = function(response) {
      var data, objFields;
      if (response != null) {
        data = response;
        objFields = ['assessment_category', 'father_result', 'mother_result', 'pathogenicity'];
        _.each(objFields, function(field) {
          if (response[field]) {
            return data[field] = response[field]['id'];
          }
        });
        return data;
      }
    };

    return Assessment;

  })(Backbone.Model);
  AssessmentMetrics = (function(_super) {
    __extends(AssessmentMetrics, _super);

    function AssessmentMetrics() {
      return AssessmentMetrics.__super__.constructor.apply(this, arguments);
    }

    AssessmentMetrics.prototype.url = function() {
      return "" + (utils.getRootUrl()) + "api/variants/" + this.variant_id + "/assessment-metrics/";
    };

    AssessmentMetrics.prototype.initialize = function(attrs, options) {
      if (!(this.result = options.result_id)) {
        throw new Error("Result ID required");
      }
      if (!(this.variant_id = options.variant_id)) {
        throw new Error("Variand ID required");
      }
    };

    return AssessmentMetrics;

  })(Backbone.Model);
  return {
    Assessment: Assessment,
    AssessmentMetrics: AssessmentMetrics
  };
});
