// Generated by CoffeeScript 1.6.3
var __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'marionette', '../../models', '../../utils', 'tpl!templates/varify/empty.html', 'tpl!templates/varify/modals/result.html', 'tpl!templates/varify/modals/result/details.html', 'tpl!templates/varify/modals/result/assessment.html'], function() {
  var AssessmentTab, DetailsTab, Marionette, ResultDetails, models, templates, utils, _, _ref, _ref1, _ref2;
  _ = arguments[0], Marionette = arguments[1], models = arguments[2], utils = arguments[3], templates = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
  templates = _.object(['empty', 'result', 'details', 'assessment'], templates);
  DetailsTab = (function(_super) {
    __extends(DetailsTab, _super);

    function DetailsTab() {
      this.metricsFetchError = __bind(this.metricsFetchError, this);
      this.metricsFetchSuccess = __bind(this.metricsFetchSuccess, this);
      _ref = DetailsTab.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    DetailsTab.prototype.template = templates.details;

    DetailsTab.prototype.className = 'tab-pane active';

    DetailsTab.prototype.ui = {
      assessmentMetrics: '#assessment-metrics',
      row1: '.details-row-1',
      row2: '.details-row-2',
      row3: '.details-row-3'
    };

    DetailsTab.prototype.initialize = function() {
      this.metrics = this.options.metrics;
      return this.$el.attr('id', 'variant-details-content');
    };

    DetailsTab.prototype.metricsFetchSuccess = function() {
      var content, metrics;
      if (_.isEmpty(this.metrics.get('metrics'))) {
        return this.ui.assessmentMetrics.html('No assessments have been made on this variant');
      } else {
        metrics = this.metrics.get('metrics');
        content = [];
        content.push('<div class=row-fluid>');
        content.push('<div class=span4>');
        content.push('</div>');
        content.push('<div class=span4>');
        content.push('</div>');
        content.push('</div>');
        content.push('<div class=row-fluid>');
        content.push('<table class=assessment-details-table>');
        content.push('<thead><tr><th></th><th>Sample</th><th>User</th><th>Pathogenicity</th><th>Category</th><th>Mother</th><th>Father</th><th>Sanger Requested</th></tr></thead>');
        content.push('</table>');
        content.push('</div>');
        $(this.ui.assessmentMetrics).empty().append(content.join(' '));
        return $('.username-popover').popover();
      }
    };

    DetailsTab.prototype.metricsFetchError = function() {
      return this.ui.assessmentMetrics.html('<p class=text-error>Error loading metrics.</p>');
    };

    DetailsTab.prototype.renderAssessmentMetricsContainer = function() {
      var content;
      content = [];
      content.push('<h4>Assessments</h4>');
      content.push("<div id=assessment-metrics><img src='" + (utils.getRootUrl('/static/images/loader-tiny.gif')) + "' /></div>");
      return content.join('');
    };

    /*
    render: =>
        @$el.append @renderAssessmentMetricsContainer()
    
        @metrics.fetch
            success: @metricsFetchSuccess
            error: @metricsFetchError
    
        return @$el
    */


    return DetailsTab;

  })(Marionette.ItemView);
  AssessmentTab = (function(_super) {
    __extends(AssessmentTab, _super);

    function AssessmentTab() {
      _ref1 = AssessmentTab.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AssessmentTab.prototype.template = templates.assessment;

    AssessmentTab.prototype.className = 'tab-pane';

    AssessmentTab.prototype.initialize = function() {
      return this.$el.attr('id', 'knowledge-capture-content');
    };

    return AssessmentTab;

  })(Marionette.ItemView);
  ResultDetails = (function(_super) {
    __extends(ResultDetails, _super);

    function ResultDetails() {
      _ref2 = ResultDetails.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ResultDetails.prototype.className = 'modal hide';

    ResultDetails.prototype.template = templates.result;

    ResultDetails.prototype.ui = {
      tabContent: '.tab-content'
    };

    ResultDetails.prototype.onRender = function() {
      return this.$el.modal({
        show: false,
        keyboard: false,
        backdrop: 'static'
      });
    };

    ResultDetails.prototype.update = function(result) {
      var metrics;
      this.ui.tabContent.empty();
      this.model = result;
      metrics = new models.AssessmentMetrics({}, {
        variant_id: result.get('variant').id,
        result_id: result.id
      });
      this.detailsTab = new DetailsTab({
        model: result,
        metrics: metrics
      });
      this.ui.tabContent.append(this.detailsTab.render().el);
      this.assessmentTab = new AssessmentTab({
        result_id: result.id
      });
      this.ui.tabContent.append(this.assessmentTab.render().el);
      return this.$el.modal('show');
    };

    return ResultDetails;

  })(Marionette.ItemView);
  return {
    ResultDetails: ResultDetails
  };
});
