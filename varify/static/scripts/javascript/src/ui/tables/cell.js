// Generated by CoffeeScript 1.6.3
var __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'marionette', '../../utils', 'cilantro/utils/numbers', 'tpl!templates/varify/empty.html'], function() {
  var BaseCell, CondensedFlags, Gene, GenomicPosition, Genotype, HgvsC, HgvsP, Marionette, Numbers, VariantEffect, templates, utils, _, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
  _ = arguments[0], Marionette = arguments[1], utils = arguments[2], Numbers = arguments[3], templates = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
  templates = _.object(['empty'], templates);
  BaseCell = (function(_super) {
    __extends(BaseCell, _super);

    function BaseCell() {
      _ref = BaseCell.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    BaseCell.prototype.template = templates.empty;

    BaseCell.prototype.tagName = 'td';

    return BaseCell;

  })(Marionette.ItemView);
  CondensedFlags = (function(_super) {
    __extends(CondensedFlags, _super);

    function CondensedFlags() {
      _ref1 = CondensedFlags.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    CondensedFlags.prototype.className = 'flags-container';

    CondensedFlags.prototype.onRender = function() {
      var flags, html, klass, label, present, _i, _len, _ref2;
      flags = [];
      flags.push(['dbSNP', this.options.variant['rsid'] != null]);
      flags.push(['HGMD', _.pluck(this.options.variant['phenotypes'], 'hgmd_id').length > 0]);
      flags.push(['1000g', this.options.variant['1000g'].length > 0]);
      flags.push(['EVS', this.options.variant['evs'].length > 0]);
      html = [];
      for (_i = 0, _len = flags.length; _i < _len; _i++) {
        _ref2 = flags[_i], label = _ref2[0], present = _ref2[1];
        klass = present ? 'text-info' : 'muted';
        html.push("<span class=\"flag " + klass + "\">" + label + "</span>");
      }
      return this.$el.html("<span class=flags>" + (html.join('')) + "<span>");
    };

    return CondensedFlags;

  })(BaseCell);
  Gene = (function(_super) {
    __extends(Gene, _super);

    function Gene() {
      _ref2 = Gene.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Gene.prototype.className = 'genes';

    Gene.prototype._getGeneHtml = function(gene) {
      var name;
      name = gene.name || '';
      if (gene.hgnc_id) {
        return "<a title=\"" + name + "\" target=_blank href=\"http://www.genenames.org/data/hgnc_data.php?hgnc_id=" + gene.hgnc_id + "\">" + gene.symbol + "</a>";
      }
      return "<span title=\"" + name + "\">" + gene.symbol + "</span>";
    };

    Gene.prototype.onRender = function() {
      var gene, genes;
      genes = this.options.genes;
      if ((genes == null) || !genes.length) {
        return this.$el.html("<span class=muted>Unknown</span>");
      } else if (this.options.collapse || genes.length === 1) {
        return this.$el.html(this._getGeneHtml(genes[0]));
      } else {
        return this.$el.html(((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = genes.length; _i < _len; _i++) {
            gene = genes[_i];
            _results.push(this._getGeneHtml(gene));
          }
          return _results;
        }).call(this)).join(', '));
      }
    };

    return Gene;

  })(BaseCell);
  GenomicPosition = (function(_super) {
    __extends(GenomicPosition, _super);

    function GenomicPosition() {
      _ref3 = GenomicPosition.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    GenomicPosition.prototype.className = 'genomic-position';

    GenomicPosition.prototype._getCategoryHtml = function(assessment) {
      var html;
      if ((assessment != null) && (assessment.assessment_category != null)) {
        html = [];
        html.push('<br />Category:');
        html.push(assessment.assessment_category.name);
        if (assessment.assessment_category.id > 2) {
          html.push('<span class="muted">(Incidental Finding)</span>');
        }
        return "<span class='assessment-category'>" + (html.join(' ')) + "</span>";
      } else {
        return '';
      }
    };

    GenomicPosition.prototype.onRender = function() {
      var category_html, pchr, position_html;
      pchr = Numbers.toDelimitedNumber(this.options.position);
      position_html = "<a target=_blank href=\"http://genome.ucsc.edu/cgi-bin/hgTracks?position=chr" + this.options.chromosome + "%3A" + this.options.position + "\">chr" + this.options.chromosome + " <span class=muted>@</span> " + pchr + "</a>";
      category_html = this._getCategoryHtml(this.options.assessment);
      return this.$el.html("" + position_html + category_html);
    };

    return GenomicPosition;

  })(BaseCell);
  Genotype = (function(_super) {
    __extends(Genotype, _super);

    function Genotype() {
      _ref4 = Genotype.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Genotype.prototype.className = 'genotype';

    Genotype.prototype.onRender = function() {
      if (this.options.value != null) {
        this.$el.attr('title', "" + this.options.value + " (" + (this.options.description || 'N/A') + ")");
        this.$el.html("" + this.options.value + " <small>(" + (this.options.description || 'N/A') + ")</small>");
        return this.$el.tooltip({
          container: 'body'
        });
      } else {
        return this.$el.html('N/A');
      }
    };

    return Genotype;

  })(BaseCell);
  HgvsC = (function(_super) {
    __extends(HgvsC, _super);

    function HgvsC() {
      _ref5 = HgvsC.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    HgvsC.prototype.className = 'hgvs-c';

    HgvsC.prototype.onRender = function() {
      var effect, hgvs_c, _ref6;
      hgvs_c = "N/A";
      if (((_ref6 = this.options.effects) != null ? _ref6.length : void 0) > 0) {
        effect = this.options.effects[0];
        if (effect.hgvs_c != null) {
          this.$el.attr('title', effect.hgvs_c || '');
          this.$el.tooltip({
            container: 'body'
          });
        }
        hgvs_c = "" + (effect.hgvs_c || 'N/A');
      }
      return this.$el.html(hgvs_c);
    };

    return HgvsC;

  })(BaseCell);
  HgvsP = (function(_super) {
    __extends(HgvsP, _super);

    function HgvsP() {
      _ref6 = HgvsP.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    HgvsP.prototype.className = 'hgvs-p';

    HgvsP.prototype.onRender = function() {
      var effect, hgvs_p, _ref7;
      hgvs_p = "N/A";
      if (((_ref7 = this.options.effects) != null ? _ref7.length : void 0) > 0) {
        effect = this.options.effects[0];
        hgvs_p = "" + (effect.hgvs_p || effect.amino_acid_change || 'N/A');
      }
      return this.$el.html(hgvs_p);
    };

    return HgvsP;

  })(BaseCell);
  VariantEffect = (function(_super) {
    __extends(VariantEffect, _super);

    function VariantEffect() {
      _ref7 = VariantEffect.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    VariantEffect.prototype.className = 'variant-effects';

    VariantEffect.prototype._getEffectHtml = function(effect) {
      var html;
      html = [];
      html.push("" + effect.type);
      if (effect.transcript != null) {
        html.push('<small>');
        html.push(effect.transcript.transcript);
        if (effect.segment != null) {
          html.push(" @ " + effect.segment);
        }
        html.push('</small>');
      }
      html.push('</small>');
      return html.join(' ');
    };

    VariantEffect.prototype._getPathogenicityHtml = function(assessment) {
      var html;
      if ((assessment != null) && (assessment.pathogenicity != null)) {
        html = [];
        html.push('<br />Pathogenicity: ');
        html.push(assessment.pathogenicity.name);
        return "<span class='pathogenicity'>" + (html.join('')) + "</span>";
      } else {
        return '';
      }
    };

    VariantEffect.prototype.onRender = function() {
      var effect, effect_html, effects, labelClass, pathogenicity_html;
      effects = this.options.effects;
      if ((effects == null) || !effects.length) {
        effect_html = '<span class=muted>No Effects</span>';
      } else if (this.options.collapse || effects.length === 1) {
        labelClass = utils.priorityClass(utils.effectImpactPriority(effects[0].impact));
        effect_html = "<span class='" + labelClass + "'>" + (this._getEffectHtml(effects[0])) + "</span>";
      } else {
        effect_html = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = effects.length; _i < _len; _i++) {
            effect = effects[_i];
            _results.push(this._getEffectHtml(effect));
          }
          return _results;
        }).call(this)).join(', ');
      }
      pathogenicity_html = this._getPathogenicityHtml(this.options.assessment);
      return this.$el.html("" + effect_html + pathogenicity_html);
    };

    return VariantEffect;

  })(BaseCell);
  return {
    CondensedFlags: CondensedFlags,
    Gene: Gene,
    GenomicPosition: GenomicPosition,
    Genotype: Genotype,
    HgvsC: HgvsC,
    HgvsP: HgvsP,
    VariantEffect: VariantEffect
  };
});
