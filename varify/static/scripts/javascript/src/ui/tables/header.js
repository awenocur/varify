// Generated by CoffeeScript 1.6.3
var __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'marionette', './row', 'tpl!templates/varify/tables/header.html'], function() {
  var Header, Marionette, row, templates, _, _ref;
  _ = arguments[0], Marionette = arguments[1], row = arguments[2], templates = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
  templates = _.object(['header'], templates);
  /*
  class HeaderCell extends Backbone.View
      tagName: 'th'
  
      constructor: (options) ->
          if not options.view?
              throw new Error 'ViewModel instance required'
          @view = options.view
          delete options.view
          super(options)
  
      onClick: ->
          _.each(@view.facets.models, (f) ->
              if f.get('concept') == @model.id
                  direction = f.get('sort')
  
                  if direction?
                      if direction.toLowerCase() == "asc"
                          f.set('sort', "desc")
                          f.set('sort_index', 0)
                      else
                          f.unset('sort')
                          f.unset('sort_index')
                  else
                      f.set('sort', "asc")
                      f.set('sort_index', 0)
              else
                  f.unset('sort')
                  f.unset('sort_index')
          , this)
  
          @view.save()
  
      initialize: ->
          @listenTo @model, 'change:visible', @toggleVisible
  
      events:
          "click": "onClick"
  
      # Finds and returns the sort icon html associatied with the sort
      # direction of the Facet being represented by this header cell.
      getSortIconClass: ->
          model = _.find @view.facets.models, (m) =>
              @model.id is m.get('concept')
  
          # If there are no view facets for the this header cell's model
          # then the this really shouldn't be displaying anyway so return
          # the empty string. We really should not ever get into this
          # situation since the facets should be driving the columns but
          # this check prevents TypeErrors just in case.
          if not model? then return
  
          direction = (model.get('sort') or '').toLowerCase()
  
          return switch direction
              when 'asc' then 'icon-sort-up'
              when 'desc' then 'icon-sort-down'
              else 'icon-sort'
  
      render: ->
          @toggleVisible()
  
          iconClass = @getSortIconClass()
  
          # TODO: Could we use a template here instead and then just modify
          # the class on the icon in the template?
          @$el.html("<span>#{ @model.get('name') } <i class=#{ iconClass }></i></span>")
          @$el.attr('title', @model.get('name'))
  
          return @
  
      toggleVisible: ->
          @$el.toggle(@model.get 'visible')
  */

  Header = (function(_super) {
    __extends(Header, _super);

    function Header() {
      _ref = Header.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Header.prototype.tagName = 'thead';

    Header.prototype.template = templates.header;

    return Header;

  })(Marionette.ItemView);
  return {
    Header: Header
  };
});
