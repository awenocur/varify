// Generated by CoffeeScript 1.6.3
var __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'marionette', 'cilantro/ui/base', '../../models', './cell', 'tpl!templates/varify/empty.html'], function() {
  var EmptyResultRow, Marionette, ResultRow, base, cell, models, templates, _, _ref, _ref1;
  _ = arguments[0], Marionette = arguments[1], base = arguments[2], models = arguments[3], cell = arguments[4], templates = 6 <= arguments.length ? __slice.call(arguments, 5) : [];
  templates = _.object(['empty'], templates);
  ResultRow = (function(_super) {
    __extends(ResultRow, _super);

    function ResultRow() {
      this.onRender = __bind(this.onRender, this);
      this.onSync = __bind(this.onSync, this);
      _ref = ResultRow.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ResultRow.prototype.className = 'area-container variant-container';

    ResultRow.prototype.template = templates.empty;

    ResultRow.prototype.tagName = 'tr';

    ResultRow.prototype.initialize = function() {
      this.data = {};
      if (!(this.data.resultPk = this.options.resultPk)) {
        throw new Error('result pk required');
      }
      if (!(this.data.rootUrl = this.options.rootUrl)) {
        throw new Error('root url required');
      }
      this.model = new models.Result({
        id: this.data.resultPk,
        rootUrl: this.options.rootUrl
      });
      return this.model.on('sync', this.onSync);
    };

    ResultRow.prototype.onSync = function() {
      var assessment, condensedFlags, gene, genomicPosition, genotype, hgvsC, hgvsP, variant, variantEffects;
      variant = this.model.get('variant');
      assessment = this.model.get('assessment');
      gene = new cell.Gene({
        genes: variant.uniqueGenes,
        collapse: true
      });
      hgvsP = new cell.HgvsP({
        effects: variant.effects
      });
      variantEffects = new cell.VariantEffect({
        effects: variant.effects,
        assessment: assessment,
        collapse: true
      });
      hgvsC = new cell.HgvsC({
        effects: variant.effects
      });
      genotype = new cell.Genotype({
        description: this.model.get('genotype_description'),
        value: this.model.get('genotype_value')
      });
      genomicPosition = new cell.GenomicPosition({
        chromosome: variant.chr,
        position: variant.chr,
        assessment: assessment
      });
      condensedFlags = new cell.CondensedFlags({
        variant: variant
      });
      this.$el.empty();
      return this.$el.append(gene.render().el, hgvsP.render().el, variantEffects.render().el, hgvsC.render().el, genotype.render().el, genomicPosition.render().el, condensedFlags.render().el);
    };

    ResultRow.prototype.onRender = function() {
      return this.model.fetch();
    };

    return ResultRow;

  })(Marionette.ItemView);
  EmptyResultRow = (function(_super) {
    __extends(EmptyResultRow, _super);

    function EmptyResultRow() {
      _ref1 = EmptyResultRow.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    EmptyResultRow.prototype.align = 'left';

    EmptyResultRow.prototype.tagName = 'tr';

    return EmptyResultRow;

  })(base.LoadView);
  return {
    ResultRow: ResultRow,
    EmptyResultRow: EmptyResultRow
  };
});
