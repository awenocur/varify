// Generated by CoffeeScript 1.6.3
var __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['cilantro', 'underscore', 'marionette', 'tpl!templates/varify/workflows/analysis.html'], function() {
  var AnalysisWorkflow, Marionette, c, templates, _, _ref;
  c = arguments[0], _ = arguments[1], Marionette = arguments[2], templates = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
  templates = _.object(['analysis'], templates);
  AnalysisWorkflow = (function(_super) {
    __extends(AnalysisWorkflow, _super);

    function AnalysisWorkflow() {
      this.onSampleFetchError = __bind(this.onSampleFetchError, this);
      this.onSampleFetch = __bind(this.onSampleFetch, this);
      this.onSampleChange = __bind(this.onSampleChange, this);
      this.onBatchChange = __bind(this.onBatchChange, this);
      this.onProjectChange = __bind(this.onProjectChange, this);
      _ref = AnalysisWorkflow.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    AnalysisWorkflow.prototype.className = 'analysis-workflow';

    AnalysisWorkflow.prototype.template = templates.analysis;

    AnalysisWorkflow.prototype.ui = {
      projects: 'select[name=project]',
      batches: 'select[name=batch]',
      samples: 'select[name=sample]',
      probandError: '#proband-required-error'
    };

    AnalysisWorkflow.prototype.events = {
      'change select[name=project]': 'onProjectChange',
      'change select[name=batch]': 'onBatchChange',
      'change select[name=sample]': 'onSampleChange'
    };

    AnalysisWorkflow.prototype.initialize = function() {
      var sampleUrl;
      this.data = {};
      if (!(this.data.context = this.options.context)) {
        throw new Error('context model required');
      }
      if (!(this.data.concepts = this.options.concepts)) {
        throw new Error('concept collection required');
      }
      sampleUrl = window.location.href.replace("analysis/", "api/samples/");
      this.sampleCollection = new c.models.Collection;
      return this.sampleCollection.url = sampleUrl;
    };

    AnalysisWorkflow.prototype.onRender = function() {
      this.$placeholder = $('<option>').attr('value', '').text('---');
      this.ui.projects.append(this.$placeholder.clone());
      this.ui.batches.append(this.$placeholder.clone());
      this.ui.samples.append(this.$placeholder.clone());
      return this.sampleCollection.fetch({
        reset: true,
        success: this.onSampleFetch,
        error: this.onSampleFetchError
      });
    };

    AnalysisWorkflow.prototype.onProjectChange = function() {
      var key, _results;
      this.ui.batches.html(this.$placeholder.clone());
      this.ui.samples.html(this.$placeholder.clone());
      this.batches = this.projects[this.ui.projects.val()];
      _results = [];
      for (key in this.batches) {
        _results.push(this.ui.batches.append('<option value="' + key + '">' + key + '</option>'));
      }
      return _results;
    };

    AnalysisWorkflow.prototype.onBatchChange = function() {
      var batchSamples, id, _i, _len, _results;
      this.ui.samples.html(this.$placeholder.clone());
      batchSamples = this.projects[this.ui.projects.val()][this.ui.batches.val()] || [];
      _results = [];
      for (_i = 0, _len = batchSamples.length; _i < _len; _i++) {
        id = batchSamples[_i];
        _results.push(this.ui.samples.append('<option value="' + id + '">' + this.samples[id].get('label') + '</option>'));
      }
      return _results;
    };

    AnalysisWorkflow.prototype.onSampleChange = function(event) {
      if (this.ui.samples.val()) {
        return this.ui.probandError.hide();
      } else {
        this.ui.probandError.show();
        return event.stopImmediatePropagation();
      }
    };

    AnalysisWorkflow.prototype.onSampleFetch = function(collection, response, options) {
      var batch, project, sample, _i, _len, _ref1, _results;
      this.projects = {};
      this.samples = {};
      _ref1 = this.sampleCollection.models;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        sample = _ref1[_i];
        if (!(project = this.projects[sample.get('project')])) {
          this.ui.projects.append('<option value="' + sample.get('project') + '">' + sample.get('project') + '</option>');
          project = this.projects[sample.get('project')] = {};
        }
        if (!(batch = project[sample.get('batch')])) {
          batch = project[sample.get('batch')] = [];
        }
        batch.push(sample.get('id'));
        _results.push(this.samples[sample.get('id')] = sample);
      }
      return _results;
    };

    AnalysisWorkflow.prototype.onSampleFetchError = function(collection, response, options) {
      return console.log('Samples ERROR!');
    };

    return AnalysisWorkflow;

  })(Marionette.Layout);
  return {
    AnalysisWorkflow: AnalysisWorkflow
  };
});
